{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","addData","editData","id","subject","priority","status","user","assigned_user","data","toggleData","setState","a","filteredItems","filter","item","console","log","deleteData","handleChange","e","target","name","value","submitHandler","preventDefault","newItem","itemData","push","alert","this","AppBar","position","style","backgroundColor","Toolbar","className","onClick","IconButton","edge","color","aria-label","onSubmit","Typography","Rating","max","onChange","TextField","multiline","label","FormControl","disabled","InputLabel","Select","labelId","MenuItem","TableContainer","Table","TableHead","TableRow","TableCell","align","TableBody","map","row","hover","key","readOnly","Edit","Delete","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3d3c0bdc.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport { AppBar, TextField, Typography, FormControl, MenuItem, InputLabel, Select, Toolbar, IconButton, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\nimport { Delete as DeleteIcon, Edit as EditIcon } from '@material-ui/icons';\nimport Rating from '@material-ui/lab/Rating';\n\nclass App extends React.Component {\n\n  state = {\n    addData: true,\n    editData: true,\n    id: 0,\n    subject: '',\n    priority: '3',\n    status: '1',\n    user: '',\n    assigned_user: '',\n    data: []\n  }\n\n  toggleData = () => {\n    this.setState({\n      addData: !this.state.addData,\n      editData: !this.state.editData\n    })\n  }\n  editData = async (id) => {\n    const filteredItems = this.state.data.filter(item =>\n      item.id === id);\n    console.log(filteredItems);\n    await this.setState({\n      addData: false,\n      editData: true,\n      id: id,\n      subject: filteredItems.subject,\n      priority: filteredItems.priority,\n      status: filteredItems.status,\n      user: filteredItems.user,\n      assigned_user: filteredItems.assigned_user\n    })\n  }\n  deleteData = id => {\n    const filteredItems = this.state.data.filter(item =>\n      item.id !== id);\n    this.setState({\n      data: filteredItems\n    })\n  }\n  handleChange = (e) => {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n  submitHandler = (e) => {\n    e.preventDefault();\n    if (!this.state.subject && !this.state.priority && !this.state.status && !this.state.user && !this.state.assigned_user) {\n      alert('Please Fill all the fields.');\n    }\n    else {\n      const newItem = {\n        id: this.state.id + 1,\n        subject: this.state.subject,\n        priority: this.state.priority,\n        status: this.state.status,\n        user: this.state.user,\n        assigned_user: this.state.assigned_user\n      }\n      const itemData = this.state.data ? this.state.data : [];\n      itemData.push(newItem);\n      this.setState({\n        data: itemData,\n        subject: '',\n        priority: '3',\n        status: '1',\n        user: '',\n        assigned_user: '',\n        id: this.state.id + 1\n      });\n    }\n  }\n\n  render() {\n    console.log(this.state);\n    return (\n      <div>\n        <div>\n          <AppBar position='static' style={{ backgroundColor: '#006A69' }}>\n            <Toolbar>\n              <span style={{ 'font-size': '21px' }}><i className=\"fa fa-ticket\"></i> Support Tickets</span>\n              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n            <div onClick={this.toggleData}>\n                <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                  {this.state.addData ? 'Show Tickets' : 'Create Tickets'}\n                </IconButton>\n              </div>\n            </Toolbar>\n          </AppBar>\n        </div>\n        <center>\n          <div className={this.state.addData ? 'addDataForm' : 'showData'} style={{ 'box-shadow': '2px 5px 13px 0px #ccc', 'border': '1px solid #fff', 'border-radius': '10px' }}>\n            {\n              this.state.addData || this.state.editData ?\n                <div>\n                  <form onSubmit={(e) => this.submitHandler(e)}>\n                    <center>\n                      <br /><br />\n                      <Typography>Priority</Typography>\n                      <Rating\n                        name=\"priority\"\n                        value={this.state.priority}\n                        max={3}\n                        onChange={(e) => this.handleChange(e)}\n                      /><br /><br />\n                      <TextField multiline label='Subject' name='subject' onChange={(e) => this.handleChange(e)} /> <br /><br />\n\n\n                      <FormControl style={{ 'min-width': '200px' }} disabled={this.state.addData}>\n                        <InputLabel>Status</InputLabel>\n                        <Select\n                          labelId=\"demo-simple-select-label\"\n                          id=\"demo-simple-select\"\n                          name=\"status\"\n                          onChange={(e) => this.handleChange(e)}\n                          value={1}\n                        >\n                          <MenuItem value={1}>Open</MenuItem>\n                          <MenuItem value={2}>In Progress</MenuItem>\n                          <MenuItem value={3}>Close</MenuItem>\n                        </Select>\n                      </FormControl><br /><br />\n                      <TextField label='User' name='user' onChange={(e) => this.handleChange(e)} /><br /><br />\n                      <TextField label='Assigned User' name='assigned_user' onChange={(e) => this.handleChange(e)} /><br /><br />\n                      <button className='btn'>{this.state.addData ? 'Add' : 'Update'}</button><br /><br />\n                    </center>\n                  </form>\n                </div>\n                :\n                <TableContainer style={{ 'border-radius': '10px' }}>\n                  <Table aria-label=\"simple table\">\n                    <TableHead>\n                      <TableRow>\n                        <TableCell align=\"center\">Id</TableCell>\n                        <TableCell align=\"center\">Subject</TableCell>\n                        <TableCell align=\"center\">Priority</TableCell>\n                        <TableCell align=\"center\">Status</TableCell>\n                        <TableCell align=\"center\">User</TableCell>\n                        <TableCell align=\"center\">Assigned User</TableCell>\n                        <TableCell align=\"center\">Action</TableCell>\n                      </TableRow>\n                    </TableHead>\n                    <TableBody>\n                      {\n                        this.state.data.map(row => (\n                          <TableRow hover key={row.id}>\n                            <TableCell align=\"center\">{row.id}</TableCell>\n                            <TableCell align=\"center\">{row.subject}</TableCell>\n                            <TableCell align=\"center\">\n                              <Rating\n                                name=\"priority_value\"\n                                value={row.priority}\n                                max={3}\n                                readOnly />\n                            </TableCell>\n                            <TableCell align=\"center\">{row.status}</TableCell>\n                            <TableCell align=\"center\">{row.user}</TableCell>\n                            <TableCell align=\"center\">{row.assigned_user}</TableCell>\n                            <TableCell align=\"center\">\n                              <span onClick={() => this.editData(row.id)}>\n                                <IconButton>\n                                  <EditIcon />\n                                </IconButton>\n                              </span>\n                              <span onClick={() => this.deleteData(row.id)}>\n                                <IconButton color='secondary'>\n                                  <DeleteIcon />\n                                </IconButton>\n                              </span>\n                            </TableCell>\n                          </TableRow>\n                        ))\n                      }\n                    </TableBody>\n                  </Table>\n                </TableContainer>\n            }\n\n          </div>\n        </center>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}