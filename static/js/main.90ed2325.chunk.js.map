{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","addData","editData","showData","unique_id","id","subject","priority","status","user","assigned_user","data","toggleData","setState","a","filteredItems","filter","item","deleteData","localStorage","setItem","JSON","stringify","handleChange","e","target","name","value","submitHandler","itemData","alert","newItem","push","map","this","getItem","parse","parseInt","AppBar","position","style","backgroundColor","Toolbar","className","onClick","IconButton","edge","color","aria-label","TableContainer","Table","TableHead","TableRow","TableCell","align","TableBody","row","hover","key","Rating","max","readOnly","FormControl","disabled","Select","MenuItem","Edit","Delete","onSubmit","Typography","onChange","TextField","multiline","label","InputLabel","labelId","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6dA6OeA,E,2MApObC,MAAQ,CACNC,SAAS,EACTC,UAAU,EACVC,UAAU,EACVC,UAAW,EACXC,GAAI,EACJC,QAAS,GACTC,SAAU,IACVC,OAAQ,EACRC,KAAM,GACNC,cAAe,GACfC,KAAM,I,EAURC,WAAa,WACX,EAAKC,SAAS,CACZV,UAAW,EAAKH,MAAMG,SACtBF,SAAU,EAAKD,MAAMC,W,EAGzBC,S,uCAAW,WAAOG,GAAP,eAAAS,EAAA,6DACHC,EAAgB,EAAKf,MAAMW,KAAKK,QAAO,SAAAC,GAAI,OAC/CA,EAAKZ,KAAOA,KAFL,SAGH,EAAKQ,SAAS,CAClBZ,SAAS,EACTC,UAAU,EACVC,UAAU,EACVE,GAAIA,EACJD,UAAW,EAAKJ,MAAMK,GACtBC,QAASS,EAAc,GAAGT,QAC1BC,SAAUQ,EAAc,GAAGR,SAC3BC,OAAQO,EAAc,GAAGP,OACzBC,KAAMM,EAAc,GAAGN,KACvBC,cAAeK,EAAc,GAAGL,gBAbzB,2C,wDAgBXQ,WAAa,SAAAb,GACX,IAAMU,EAAgB,EAAKf,MAAMW,KAAKK,QAAO,SAAAC,GAAI,OAC/CA,EAAKZ,KAAOA,KACd,EAAKQ,SAAS,CACZF,KAAMI,IAERI,aAAaC,QAAQ,OAAQC,KAAKC,UAAUP,K,EAE9CQ,aAAe,SAACC,GACd,EAAKX,SAAL,eAAiBW,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,S,EAE5CC,c,uCAAgB,WAAOJ,GAAP,iBAAAV,EAAA,yDAEVe,EAAW,GACV,EAAK7B,MAAMM,SAAY,EAAKN,MAAMO,UAAa,EAAKP,MAAMQ,QAAW,EAAKR,MAAMS,MAAS,EAAKT,MAAMU,cAH3F,gBAIZoB,MAAM,+BAJM,8BAOR,EAAK9B,MAAMC,SACP8B,EAAU,CACd1B,GAAI,EAAKL,MAAMK,GAAK,EACpBC,QAAS,EAAKN,MAAMM,QACpBC,SAAU,EAAKP,MAAMO,SACrBC,OAAQ,EAAKR,MAAMQ,OACnBC,KAAM,EAAKT,MAAMS,KACjBC,cAAe,EAAKV,MAAMU,gBAG5BmB,EAAW,EAAK7B,MAAMW,KAAO,EAAKX,MAAMW,KAAO,IACtCqB,KAAKD,IAGP,EAAK/B,MAAME,WAClB2B,EAAW,EAAK7B,MAAMW,MACbsB,KAAI,SAAAhB,GACPA,EAAKZ,KAAO,EAAKL,MAAMK,KACzBY,EAAKX,QAAU,EAAKN,MAAMM,QAC1BW,EAAKV,SAAW,EAAKP,MAAMO,SAC3BU,EAAKT,OAAS,EAAKR,MAAMQ,OACzBS,EAAKR,KAAO,EAAKT,MAAMS,KACvBQ,EAAKP,cAAgB,EAAKV,MAAMU,kBA7B1B,SAiCN,EAAKG,SAAS,CAClBF,KAAMkB,EACNvB,QAAS,GACTC,SAAU,IACVC,OAAQ,IACRC,KAAM,GACNC,cAAe,GACfL,GAAI,EAAKL,MAAME,SAAW,EAAKF,MAAMI,UAAY,EAAKJ,MAAMK,GAAK,EACjEJ,SAAS,EACTC,UAAU,EACVC,UAAU,IA3CA,OA6CZgB,aAAaC,QAAQ,OAAQC,KAAKC,UAAUO,IAC5CV,aAAaC,QAAQ,KAAM,EAAKpB,MAAME,SAAW,EAAKF,MAAMI,UAAY,EAAKJ,MAAMK,IA9CvE,4C,yIAvCd6B,KAAKrB,SAAS,CACZF,KAAMQ,aAAagB,QAAQ,QAAUd,KAAKe,MAAMjB,aAAagB,QAAQ,SAAW,GAChF9B,GAAIc,aAAagB,QAAQ,MAAQE,SAASlB,aAAagB,QAAQ,OAAS,M,+BAuFlE,IAAD,OACDxB,EAAOQ,aAAagB,QAAQ,QAAUd,KAAKe,MAAMjB,aAAagB,QAAQ,SAAW,GACvF,OACE,6BACE,6BACE,kBAACG,EAAA,EAAD,CAAQC,SAAS,SAASC,MAAO,CAAEC,gBAAiB,YAClD,kBAACC,EAAA,EAAD,KACE,0BAAMF,MAAO,CAAE,YAAa,SAAU,uBAAGG,UAAU,iBAAnD,oBADF,+BAGA,yBAAKC,QAASV,KAAKtB,YACf,kBAACiC,EAAA,EAAD,CAAYC,KAAK,QAAQC,MAAM,UAAUC,aAAW,QAChDd,KAAKlC,MAAMG,SAA4B,iBAAjB,oBAMlC,gCACE,yBAAKwC,UAAYT,KAAKlC,MAAMG,SAA2B,WAAhB,cAA4BqC,MAAO,CAAE,aAAc,wBAAyB,OAAU,iBAAkB,gBAAiB,SAE3JN,KAAKlC,MAAMG,SAoCV,kBAAC8C,EAAA,EAAD,CAAgBT,MAAO,CAAE,gBAAiB,SACxC,kBAACU,EAAA,EAAD,CAAOF,aAAW,gBAChB,kBAACG,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAWC,MAAM,UAAjB,MACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,UAAjB,WACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,UAAjB,YACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,UAAjB,UACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,UAAjB,QACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,UAAjB,iBACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,UAAjB,YAGJ,kBAACC,EAAA,EAAD,KAEI5C,EAAKsB,KAAI,SAAAuB,GAAG,OACV,kBAACJ,EAAA,EAAD,CAAUK,OAAK,EAACC,IAAKF,EAAInD,IACvB,kBAACgD,EAAA,EAAD,CAAWC,MAAM,UAAUE,EAAInD,IAC/B,kBAACgD,EAAA,EAAD,CAAWC,MAAM,UAAUE,EAAIlD,SAC/B,kBAAC+C,EAAA,EAAD,CAAWC,MAAM,UACf,kBAACK,EAAA,EAAD,CACEjC,KAAK,iBACLC,MAAO6B,EAAIjD,SACXqD,IAAK,EACLC,UAAQ,KAEZ,kBAACR,EAAA,EAAD,CAAWC,MAAM,UACf,kBAACQ,EAAA,EAAD,CAAatB,MAAO,CAAE,YAAa,SAAWuB,UAAQ,GACpD,kBAACC,EAAA,EAAD,CACEtC,KAAK,aACLC,MAAO6B,EAAIhD,QAEX,kBAACyD,EAAA,EAAD,CAAUtC,MAAO,GAAjB,QACA,kBAACsC,EAAA,EAAD,CAAUtC,MAAO,GAAjB,eACA,kBAACsC,EAAA,EAAD,CAAUtC,MAAO,GAAjB,YAIN,kBAAC0B,EAAA,EAAD,CAAWC,MAAM,UAAUE,EAAI/C,MAC/B,kBAAC4C,EAAA,EAAD,CAAWC,MAAM,UAAUE,EAAI9C,eAC/B,kBAAC2C,EAAA,EAAD,CAAWC,MAAM,UACf,0BAAMV,QAAS,kBAAM,EAAK1C,SAASsD,EAAInD,MACrC,kBAACwC,EAAA,EAAD,KACE,kBAACqB,EAAA,EAAD,QAGJ,0BAAMtB,QAAS,kBAAM,EAAK1B,WAAWsC,EAAInD,MACvC,kBAACwC,EAAA,EAAD,CAAYE,MAAM,aAChB,kBAACoB,EAAA,EAAD,gBAnFlB,6BACE,0BAAMC,SAAU,SAAC5C,GAAD,OAAO,EAAKI,cAAcJ,KACxC,gCACE,6BAAM,6BACN,kBAAC6C,EAAA,EAAD,iBACA,kBAACV,EAAA,EAAD,CACEjC,KAAK,WACLC,MAAOO,KAAKlC,MAAMO,SAClBqD,IAAK,EACLU,SAAU,SAAC9C,GAAD,OAAO,EAAKD,aAAaC,MACnC,6BAAM,6BACR,kBAAC+C,EAAA,EAAD,CAAWC,WAAS,EAACC,MAAM,UAAU9C,MAAOO,KAAKlC,MAAMM,QAASoB,KAAK,UAAU4C,SAAU,SAAC9C,GAAD,OAAO,EAAKD,aAAaC,MATpH,IAS2H,6BAAM,6BAG/H,kBAACsC,EAAA,EAAD,CAAatB,MAAO,CAAE,YAAa,SAAWuB,SAAU7B,KAAKlC,MAAMC,SACjE,kBAACyE,EAAA,EAAD,eACA,kBAACV,EAAA,EAAD,CACEW,QAAQ,2BACRtE,GAAG,qBACHqB,KAAK,SACL4C,SAAU,SAAC9C,GAAD,OAAO,EAAKD,aAAaC,IACnCG,MAAOO,KAAKlC,MAAMQ,QAElB,kBAACyD,EAAA,EAAD,CAAUtC,MAAO,GAAjB,QACA,kBAACsC,EAAA,EAAD,CAAUtC,MAAO,GAAjB,eACA,kBAACsC,EAAA,EAAD,CAAUtC,MAAO,GAAjB,WAEU,6BAAM,6BACpB,kBAAC4C,EAAA,EAAD,CAAWE,MAAM,OAAO9C,MAAOO,KAAKlC,MAAMS,KAAMiB,KAAK,OAAO4C,SAAU,SAAC9C,GAAD,OAAO,EAAKD,aAAaC,MAAM,6BAAM,6BAC3G,kBAAC+C,EAAA,EAAD,CAAWE,MAAM,gBAAgB9C,MAAOO,KAAKlC,MAAMU,cAAegB,KAAK,gBAAgB4C,SAAU,SAAC9C,GAAD,OAAO,EAAKD,aAAaC,MAAM,6BAAM,6BACtI,4BAAQmB,UAAU,OAAOT,KAAKlC,MAAMC,QAAU,MAAQ,UAAkB,6BAAM,uC,GA7JlF2E,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.90ed2325.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport { AppBar, TextField, Typography, FormControl, MenuItem, InputLabel, Select, Toolbar, IconButton, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\nimport { Delete as DeleteIcon, Edit as EditIcon } from '@material-ui/icons';\nimport Rating from '@material-ui/lab/Rating';\n\nclass App extends React.Component {\n\n  state = {\n    addData: true,\n    editData: false,\n    showData: false,\n    unique_id: 0,\n    id: 0,\n    subject: '',\n    priority: '3',\n    status: 1,\n    user: '',\n    assigned_user: '',\n    data: []\n  }\n\n  componentDidMount() {\n    this.setState({\n      data: localStorage.getItem('data') ? JSON.parse(localStorage.getItem('data')) : [],\n      id: localStorage.getItem('id') ? parseInt(localStorage.getItem('id')) : 0\n    })\n  }\n\n  toggleData = () => {\n    this.setState({\n      showData: !this.state.showData,\n      addData: !this.state.addData\n    })\n  }\n  editData = async (id) => {\n    const filteredItems = this.state.data.filter(item =>\n      item.id === id);\n    await this.setState({\n      addData: false,\n      editData: true,\n      showData: false,\n      id: id,\n      unique_id: this.state.id,\n      subject: filteredItems[0].subject,\n      priority: filteredItems[0].priority,\n      status: filteredItems[0].status,\n      user: filteredItems[0].user,\n      assigned_user: filteredItems[0].assigned_user\n    })\n  }\n  deleteData = id => {\n    const filteredItems = this.state.data.filter(item =>\n      item.id !== id);\n    this.setState({\n      data: filteredItems\n    })\n    localStorage.setItem('data', JSON.stringify(filteredItems));\n  }\n  handleChange = (e) => {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n  submitHandler = async (e) => {\n    // e.preventDefault();\n    let itemData = [];\n    if (!this.state.subject && !this.state.priority && !this.state.status && !this.state.user && !this.state.assigned_user) {\n      alert('Please Fill all the fields.');\n    }\n    else {\n      if (this.state.addData) {\n        const newItem = {\n          id: this.state.id + 1,\n          subject: this.state.subject,\n          priority: this.state.priority,\n          status: this.state.status,\n          user: this.state.user,\n          assigned_user: this.state.assigned_user\n        }\n\n        itemData = this.state.data ? this.state.data : [];\n        itemData.push(newItem);\n\n      }\n      else if (this.state.editData) {\n        itemData = this.state.data;\n        itemData.map(item => {\n          if (item.id === this.state.id) {\n            item.subject = this.state.subject;\n            item.priority = this.state.priority;\n            item.status = this.state.status;\n            item.user = this.state.user;\n            item.assigned_user = this.state.assigned_user;\n          }\n        })\n      }\n      await this.setState({\n        data: itemData,\n        subject: '',\n        priority: '3',\n        status: '1',\n        user: '',\n        assigned_user: '',\n        id: this.state.editData ? this.state.unique_id : this.state.id + 1,\n        addData: false,\n        editData: false,\n        showData: true\n      });\n      localStorage.setItem('data', JSON.stringify(itemData));\n      localStorage.setItem('id', this.state.editData ? this.state.unique_id : this.state.id);\n    }\n  }\n\n  render() {\n    const data = localStorage.getItem('data') ? JSON.parse(localStorage.getItem('data')) : []\n    return (\n      <div>\n        <div>\n          <AppBar position='static' style={{ backgroundColor: '#006A69' }}>\n            <Toolbar>\n              <span style={{ 'font-size': '21px' }}><i className=\"fa fa-ticket\"></i> Support Tickets</span>\n              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n            <div onClick={this.toggleData}>\n                <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                  {!this.state.showData ? 'Show Tickets' : 'Create Tickets'}\n                </IconButton>\n              </div>\n            </Toolbar>\n          </AppBar>\n        </div>\n        <center>\n          <div className={!this.state.showData ? 'addDataForm' : 'showData'} style={{ 'box-shadow': '2px 5px 13px 0px #ccc', 'border': '1px solid #fff', 'border-radius': '10px' }}>\n            {\n              !this.state.showData ?\n                <div>\n                  <form onSubmit={(e) => this.submitHandler(e)}>\n                    <center>\n                      <br /><br />\n                      <Typography>Priority</Typography>\n                      <Rating\n                        name=\"priority\"\n                        value={this.state.priority}\n                        max={3}\n                        onChange={(e) => this.handleChange(e)}\n                      /><br /><br />\n                      <TextField multiline label='Subject' value={this.state.subject} name='subject' onChange={(e) => this.handleChange(e)} /> <br /><br />\n\n\n                      <FormControl style={{ 'min-width': '200px' }} disabled={this.state.addData}>\n                        <InputLabel>Status</InputLabel>\n                        <Select\n                          labelId=\"demo-simple-select-label\"\n                          id=\"demo-simple-select\"\n                          name=\"status\"\n                          onChange={(e) => this.handleChange(e)}\n                          value={this.state.status}\n                        >\n                          <MenuItem value={1}>Open</MenuItem>\n                          <MenuItem value={2}>In Progress</MenuItem>\n                          <MenuItem value={3}>Close</MenuItem>\n                        </Select>\n                      </FormControl><br /><br />\n                      <TextField label='User' value={this.state.user} name='user' onChange={(e) => this.handleChange(e)} /><br /><br />\n                      <TextField label='Assigned User' value={this.state.assigned_user} name='assigned_user' onChange={(e) => this.handleChange(e)} /><br /><br />\n                      <button className='btn'>{this.state.addData ? 'Add' : 'Update'}</button><br /><br />\n                    </center>\n                  </form>\n                </div>\n                :\n                <TableContainer style={{ 'border-radius': '10px' }}>\n                  <Table aria-label=\"simple table\">\n                    <TableHead>\n                      <TableRow>\n                        <TableCell align=\"center\">Id</TableCell>\n                        <TableCell align=\"center\">Subject</TableCell>\n                        <TableCell align=\"center\">Priority</TableCell>\n                        <TableCell align=\"center\">Status</TableCell>\n                        <TableCell align=\"center\">User</TableCell>\n                        <TableCell align=\"center\">Assigned User</TableCell>\n                        <TableCell align=\"center\">Action</TableCell>\n                      </TableRow>\n                    </TableHead>\n                    <TableBody>\n                      {\n                        data.map(row => (\n                          <TableRow hover key={row.id}>\n                            <TableCell align=\"center\">{row.id}</TableCell>\n                            <TableCell align=\"center\">{row.subject}</TableCell>\n                            <TableCell align=\"center\">\n                              <Rating\n                                name=\"priority_value\"\n                                value={row.priority}\n                                max={3}\n                                readOnly />\n                            </TableCell>\n                            <TableCell align=\"center\">\n                              <FormControl style={{ 'min-width': '100px' }} disabled>\n                                <Select\n                                  name=\"statusShow\"\n                                  value={row.status}\n                                >\n                                  <MenuItem value={1}>Open</MenuItem>\n                                  <MenuItem value={2}>In Progress</MenuItem>\n                                  <MenuItem value={3}>Close</MenuItem>\n                                </Select>\n                              </FormControl>\n                            </TableCell>\n                            <TableCell align=\"center\">{row.user}</TableCell>\n                            <TableCell align=\"center\">{row.assigned_user}</TableCell>\n                            <TableCell align=\"center\">\n                              <span onClick={() => this.editData(row.id)}>\n                                <IconButton>\n                                  <EditIcon />\n                                </IconButton>\n                              </span>\n                              <span onClick={() => this.deleteData(row.id)}>\n                                <IconButton color='secondary'>\n                                  <DeleteIcon />\n                                </IconButton>\n                              </span>\n                            </TableCell>\n                          </TableRow>\n                        ))\n                      }\n                    </TableBody>\n                  </Table>\n                </TableContainer>\n            }\n\n          </div>\n        </center>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}